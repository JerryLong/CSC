package com.example.imagecache;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.rongyao.guess.R;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.widget.ImageView;

public class ImageLoader {
	private int width = 80, height = 80;//加载图片的默认大小为80*80
	MemoryCache memoryCache = new MemoryCache(); //内存缓存对象
	FileCache fileCache;//文件缓存对象
	private Map<ImageView, String> imageMap = Collections.synchronizedMap(new WeakHashMap<ImageView, String>());
	// 线程池对象
	ExecutorService executorService;

	public ImageLoader(Context context, int width, int height) {
		this.width = width;
		this.height = height;
		fileCache = new FileCache(context);
		//executorService = Executors.newFixedThreadPool(10);
		executorService = Executors.newCachedThreadPool();
	}

	// 加载失败显示的默认图片
	final int stub_id = R.drawable.default_picture2x;

	/**
	 * 把图片显示在ImageView上
	 * @param url  图片url
	 * @param imageView ImageView控件
	 */
	public void DisplayImage(String url, ImageView imageView) {
		imageMap.put(imageView, url);
		// 首先从内存缓存中获取图像
		Bitmap bitmap = memoryCache.get(url);
		if (bitmap != null)
			imageView.setImageBitmap(bitmap);
				
		else {
			// 如果内存缓存中没有
			// imageView.setImageResource(stub_id);
			queuePhoto(url, imageView);
		}
	}

	private void queuePhoto(String url, ImageView imageView) {
		PhotoToLoad p = new PhotoToLoad(url, imageView);
		executorService.submit(new PhotosLoader(p));
	}

	/**
	 * 通过url获取图片
	 * @param url
	 * @return
	 */
	private Bitmap getBitmap(String url) {
		File f = fileCache.getFile(url);

		//先从文件中读取
		Bitmap b = decodeFile(f);
		if (b != null)
			return b;

		//如果为null的话就联网获取
		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl.openConnection();
			conn.setConnectTimeout(10000);
			conn.setReadTimeout(10000);
			conn.setInstanceFollowRedirects(true);
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			CopyStream(is, os);
			os.close();
			bitmap = decodeFile(f);
			return bitmap;
		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}
	}

	/**
	 * 从文件中读取图片
	 * @param f 文件
	 * @return
	 */
	private Bitmap decodeFile(File f) {
		try {
			// decode image size
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(new FileInputStream(f), null, o);

			// Find the correct scale value. It should be the power of 2.
			/*
			 * final int REQUIRED_SIZE = 70; int width_tmp = o.outWidth,
			 * height_tmp = o.outHeight; int scale = 1; while (true) { if
			 * (width_tmp / 2 < REQUIRED_SIZE || height_tmp / 2 < REQUIRED_SIZE)
			 * break; width_tmp /= 2; height_tmp /= 2; scale *= 2; }
			 * 
			 * // decode with inSampleSize BitmapFactory.Options o2 = new
			 * BitmapFactory.Options();
			 */
			o.inSampleSize = calculateInSampleSize1(o, width, height);
			o.inJustDecodeBounds = false;
			return BitmapFactory.decodeStream(new FileInputStream(f), null, o);
		} catch (FileNotFoundException e) {
		}
		return null;
	}

	// Task for the queue
	private class PhotoToLoad {
		public String url;
		public ImageView imageView;

		public PhotoToLoad(String u, ImageView i) {
			url = u;
			imageView = i;
		}
	}

	class PhotosLoader implements Runnable {
		PhotoToLoad photoToLoad;

		PhotosLoader(PhotoToLoad photoToLoad) {
			this.photoToLoad = photoToLoad;
		}

		@Override
		public void run() {

			if (imageViewReused(photoToLoad))
				return;
			Bitmap bmp = getBitmap(photoToLoad.url);
			memoryCache.put(photoToLoad.url, bmp);
			if (imageViewReused(photoToLoad))
				return;
			BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
			Activity a = (Activity) photoToLoad.imageView.getContext();
			a.runOnUiThread(bd);
		}
	}

	/**
	 * 当前图片url是否与ImageView控件相符合
	 * 
	 * @param photoToLoad
	 * @return
	 */
	boolean imageViewReused(PhotoToLoad photoToLoad) {
		String tag = imageMap.get(photoToLoad.imageView);
		if (tag == null || !tag.equals(photoToLoad.url))
			return true;
		return false;
	}

	// 开启子线程加载图片
	class BitmapDisplayer implements Runnable {
		Bitmap bitmap;
		PhotoToLoad photoToLoad;

		public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
			bitmap = b;
			photoToLoad = p;
		}

		@SuppressWarnings("deprecation")
		public void run() {
			if (imageViewReused(photoToLoad))
				return;
			if (bitmap != null)
				
				photoToLoad.imageView.setImageBitmap(bitmap);
				
			else
				photoToLoad.imageView.setImageResource(stub_id);
		}
	}

	public void clearCache() {
		memoryCache.clear();
		fileCache.clear();
	}

	public static void CopyStream(InputStream is, OutputStream os) {
		final int buffer_size = 1024;
		try {
			byte[] bytes = new byte[buffer_size];
			for (;;) {
				int count = is.read(bytes, 0, buffer_size);
				if (count == -1)
					break;
				os.write(bytes, 0, count);
			}
		} catch (Exception ex) {
		}
	}

	/**
	 * 计算图片缩放比例
	 * @param options BitmapFactory.Options
	 * @param reqWidth 需要显示的图片的宽度
	 * @param reqHeight 需要显示的图片的高度
	 * @return
	 */
	public int calculateInSampleSize1(BitmapFactory.Options options, int reqWidth, int reqHeight) {
		final int height = options.outHeight;
		final int width = options.outWidth;
		/*
		 * System.out.println("height:========="+height);
		 * System.out.println("width:========="+width);
		 * System.out.println("reqWidth:========="+reqWidth);
		 * System.out.println("reqHeight:========="+reqHeight);
		 */
		int inSampleSize = 1;

		if (height > reqHeight || width > reqWidth) {
			final int heightRatio = Math.round((float) height / (float) reqHeight);
			final int widthRatio = Math.round((float) width / (float) reqWidth);
			inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
		}
		return inSampleSize;
	}
}
